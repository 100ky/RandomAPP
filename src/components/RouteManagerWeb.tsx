import React, { useState } from 'react';
import styles from '../styles/Social.module.css';
import { useSocialStore } from '../store/socialStoreEnhanced';
import { Route } from '../types/social';
import { formatDistance, formatDuration } from '../utils/formatters';
import { downloadRouteAsGpx, downloadRouteAsKml } from '../utils/routeExport';

type RouteManagerProps = {
  onClose: () => void;
  onViewRoute?: (route: Route) => void;
  onShare?: (route: Route) => void;
};

const RouteManager: React.FC<RouteManagerProps> = ({ onClose, onViewRoute, onShare }) => {
  const { 
    savedRoutes, 
    isRecordingRoute, 
    startRouteRecording, 
    stopRouteRecording, 
    deleteRoute, 
    shareRoute, 
    importRoute 
  } = useSocialStore();
  
  const [showNewRouteModal, setShowNewRouteModal] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);
  const [selectedRouteForExport, setSelectedRouteForExport] = useState<Route | null>(null);
  const [newRouteName, setNewRouteName] = useState('');
  const [importCode, setImportCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<'all' | 'recorded' | 'shared'>('all');
  
  const handleStartRecording = () => {
    if (newRouteName.trim()) {
      startRouteRecording(newRouteName);
      setNewRouteName('');
      setShowNewRouteModal(false);
      alert("Z√°znam va≈°√≠ trasy byl zah√°jen. M≈Ø≈æete pokraƒçovat v hran√≠ a a≈æ budete hotovi, staƒç√≠ z√°znam ukonƒçit.");
    } else {
      alert("Zadejte n√°zev trasy");
    }
  };
  
  const handleStopRecording = () => {
    if (confirm("Opravdu chcete ukonƒçit z√°znam aktu√°ln√≠ trasy?")) {
      stopRouteRecording();
      alert("Z√°znam trasy byl ukonƒçen a trasa byla ulo≈æena.");
    }
  };
    const handleShareRoute = (route: Route) => {
    // Pokud m√°me handler pro sd√≠len√≠, pou≈æijeme novou komponentu ShareRoute
    if (typeof onShare === 'function') {
      onShare(route);
    } else {
      // Fallback pro star≈°√≠ zp≈Øsob
      const routeCode = shareRoute(route);
      
      if (routeCode) {
        navigator.clipboard.writeText(routeCode);
        alert(`K√≥d trasy byl zkop√≠rov√°n do schr√°nky: ${routeCode}`);
      } else {
        alert("Nepoda≈ôilo se vygenerovat k√≥d pro sd√≠len√≠ trasy.");
      }
    }
  };
  
  const handleImportRoute = async () => {
    if (!importCode.trim()) {
      alert("Zadejte k√≥d trasy");
      return;
    }
    
    setLoading(true);
    const success = await importRoute(importCode);
    setLoading(false);
    
    if (success) {
      setShowImportModal(false);
      setImportCode('');
      alert("Trasa byla √∫spƒõ≈°nƒõ importov√°na!");
    } else {
      alert("Import trasy se nezda≈ôil. Zkontrolujte k√≥d a zkuste to znovu.");
    }
  };
  
  const handleDeleteRoute = (route: Route) => {
    if (confirm(`Opravdu chcete smazat trasu "${route.name}"?`)) {
      deleteRoute(route.id);
    }
  };
  
  const handleExportRoute = (route: Route) => {
    setSelectedRouteForExport(route);
    setShowExportModal(true);
  };
  
  const handleExportAs = (format: 'gpx' | 'kml') => {
    if (!selectedRouteForExport) return;
    
    if (format === 'gpx') {
      downloadRouteAsGpx(selectedRouteForExport);
    } else if (format === 'kml') {
      downloadRouteAsKml(selectedRouteForExport);
    }
    
    setShowExportModal(false);
  };
  
  const filteredRoutes = savedRoutes.filter(route => {
    if (activeTab === 'all') return true;
    if (activeTab === 'recorded') return !route.isImported;
    if (activeTab === 'shared') return route.isImported;
    return true;
  });

  return (
    <div className={`${styles.socialModal} social-modal`}>
      <div className={styles.modalHeader}>
        <h2 className={styles.modalTitle}>Spr√°va tras</h2>
        <button className={styles.closeButton} onClick={onClose}>‚úï</button>
      </div>
      
      <div className={styles.tabContainer}>
        <button 
          className={`${styles.tabButton} ${activeTab === 'all' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('all')}
        >
          V≈°echny trasy
        </button>
        <button 
          className={`${styles.tabButton} ${activeTab === 'recorded' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('recorded')}
        >
          Moje z√°znamy
        </button>
        <button 
          className={`${styles.tabButton} ${activeTab === 'shared' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('shared')}
        >
          Importovan√©
        </button>
      </div>
      
      <div className={styles.modalBody}>
        {isRecordingRoute ? (
          <div className={styles.recordingNotice}>
            <p><span className={styles.recordingIndicator}>‚óè</span> Z√°znam trasy aktivn√≠</p>
            <button 
              className={styles.primaryButton}
              onClick={handleStopRecording}
            >
              Ukonƒçit z√°znam trasy
            </button>
          </div>
        ) : (
          <div className={styles.routeActions}>
            <button 
              className={`${styles.primaryButton} button-hover`}
              onClick={() => setShowNewRouteModal(true)}
            >
              Zaznamenat novou trasu
            </button>
            <button 
              className={`${styles.secondaryButton} button-hover`}
              onClick={() => setShowImportModal(true)}
            >
              Importovat trasu
            </button>
          </div>
        )}
        
        <div className={styles.routesList}>
          <h3>Trasy ({filteredRoutes.length})</h3>
          
          {filteredRoutes.length === 0 ? (
            <div className={styles.emptyState}>
              {activeTab === 'all' && <p>Zat√≠m nem√°te ≈æ√°dn√© trasy</p>}
              {activeTab === 'recorded' && <p>Zat√≠m jste nezaznamenali ≈æ√°dn√© trasy</p>}
              {activeTab === 'shared' && <p>Zat√≠m jste neimportovali ≈æ√°dn√© trasy</p>}
            </div>
          ) : (
            filteredRoutes.map(route => (
              <div key={route.id} className={`${styles.routeCard} ${route.isNew ? 'new-item-highlight' : ''}`}>
                <div className={styles.routeHeader}>
                  <h4 className={styles.routeName}>{route.name}</h4>
                  {route.isImported && <span className={styles.importedLabel}>Importov√°no</span>}
                </div>
                <p className={styles.routeStats}>
                  Vzd√°lenost: {formatDistance(route.totalDistance)} ‚Ä¢ 
                  Trv√°n√≠: {formatDuration(route.duration)} ‚Ä¢ 
                  Body: {route.points.length}
                </p>
                <div className={styles.routeActions}>
                  <button 
                    className={`${styles.actionButton} ${styles.viewButton}`}
                    onClick={() => onViewRoute && onViewRoute(route)}
                    title="Zobrazit na mapƒõ"
                  >
                    <span role="img" aria-label="Zobrazit">üó∫Ô∏è</span>
                  </button>
                  <button 
                    className={`${styles.actionButton} ${styles.exportButton}`}
                    onClick={() => handleExportRoute(route)}
                    title="Exportovat"
                  >
                    <span role="img" aria-label="Export">‚¨áÔ∏è</span>
                  </button>
                  <button 
                    className={`${styles.actionButton} ${styles.shareButton}`}
                    onClick={() => handleShareRoute(route)}
                    title="Sd√≠let"
                  >
                    <span role="img" aria-label="Sd√≠let">üì§</span>
                  </button>
                  <button 
                    className={`${styles.actionButton} ${styles.deleteButton}`}
                    onClick={() => handleDeleteRoute(route)}
                    title="Smazat"
                  >
                    <span role="img" aria-label="Smazat">üóëÔ∏è</span>
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
      
      {/* Mod√°ln√≠ okno pro vytvo≈ôen√≠ nov√© trasy */}
      {showNewRouteModal && (
        <div className={styles.innerModal}>
          <div className={styles.innerModalContent}>
            <h3>Nov√° trasa</h3>
            <p>Zadejte n√°zev pro va≈°i novou trasu:</p>
            <input
              type="text"
              placeholder="N√°zev trasy"
              value={newRouteName}
              onChange={(e) => setNewRouteName(e.target.value)}
              className={styles.textInput}
            />
            <div className={styles.buttonGroup}>
              <button 
                className={styles.secondaryButton}
                onClick={() => setShowNewRouteModal(false)}
              >
                Zru≈°it
              </button>
              <button 
                className={styles.primaryButton}
                onClick={handleStartRecording}
              >
                Zaƒç√≠t z√°znam
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Mod√°ln√≠ okno pro import trasy */}
      {showImportModal && (
        <div className={styles.innerModal}>
          <div className={styles.innerModalContent}>
            <h3>Import trasy</h3>
            <p>Zadejte k√≥d sd√≠len√© trasy:</p>
            <input
              type="text"
              placeholder="K√≥d trasy"
              value={importCode}
              onChange={(e) => setImportCode(e.target.value)}
              className={styles.textInput}
            />
            <div className={styles.buttonGroup}>
              <button 
                className={styles.secondaryButton}
                onClick={() => setShowImportModal(false)}
                disabled={loading}
              >
                Zru≈°it
              </button>
              <button 
                className={styles.primaryButton}
                onClick={handleImportRoute}
                disabled={loading}
              >
                {loading ? 'Importuji...' : 'Importovat'}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Mod√°ln√≠ okno pro export trasy */}
      {showExportModal && selectedRouteForExport && (
        <div className={styles.innerModal}>
          <div className={styles.innerModalContent}>
            <h3>Export trasy</h3>
            <p>Vyberte form√°t exportu pro trasu "{selectedRouteForExport.name}":</p>
            <div className={styles.exportOptions}>
              <button 
                className={`${styles.exportOption} button-hover`}
                onClick={() => handleExportAs('gpx')}
              >
                <div className={styles.exportIcon}>GPX</div>
                <div className={styles.exportDescription}>
                  <strong>GPX form√°t</strong>
                  <span>Kompatibiln√≠ s vƒõt≈°inou GPS za≈ô√≠zen√≠ a aplikacemi</span>
                </div>
              </button>
              
              <button 
                className={`${styles.exportOption} button-hover`}
                onClick={() => handleExportAs('kml')}
              >
                <div className={styles.exportIcon}>KML</div>
                <div className={styles.exportDescription}>
                  <strong>KML form√°t</strong>
                  <span>Pro Google Earth a dal≈°√≠ mapov√© slu≈æby</span>
                </div>
              </button>
            </div>
            <div className={styles.buttonGroup}>
              <button 
                className={styles.secondaryButton}
                onClick={() => setShowExportModal(false)}
              >
                Zru≈°it
              </button>
            </div>
          </div>
        </div>
      )}
      
      <div className={styles.modalFooter}>
        <button className={styles.secondaryButton} onClick={onClose}>
          Zav≈ô√≠t
        </button>
      </div>
    </div>
  );
};

export default RouteManager;
